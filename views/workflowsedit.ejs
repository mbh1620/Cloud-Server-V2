<% include ./partials/workflowsheader.ejs %>
<head>
    <link rel="stylesheet" href="../../../modules/prism.css">
</head>

<div class="container" style="position: relative;">
    <h1>Create a new Workflow</h1>
    
<pre><textarea id="codeInput" spellcheck="false" oninput="update(this.value);" onkeydown="if(event.keyCode===9){var v=this.value,s=this.selectionStart,e=this.selectionEnd;this.value=v.substring(0, s)+'\t'+v.substring(e);this.selectionStart=this.selectionEnd=s+1;update(this.value);return false;}else if(event.keyCode===188){}else if (event.keyCode===190){}"><%=data%></textarea></pre>

<pre id="highlighting">
<code id="codeDisplay" class="language-python" style="overflow: scroll;"><%= data %>
</code>
</pre>


    <button class='btn btn-light btn-md' onclick="saveWorkflow('<%= currentUser.name %>')" style="margin-top:20px">Save</button>
    <button class='btn btn-light btn-md' style="margin-top:20px;margin-left:-5px">Edit</button>
    <button class='btn btn-primary btn-md' onclick="runWorkflow('<%= currentUser.name %>')" style="margin-top:20px;margin-left:-5px">Test</button>

    <div class="dropdown">
        <button class="btn btn-light dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          Language
        </button>
        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
          <a class="dropdown-item" href="#">Python 3.9</a>
          <a class="dropdown-item" href="#">JavaScript</a>
        </div>
    </div>
    <input style="" type="text" id="nameBox" class="namebox form-control w-50" placeholder="Workflow Name"
        aria-label="Example text with button addon" aria-describedby="button-addon1" value="<%= workflow.workflowName %>">

    <h4 style="margin-top:20px">Workflow Configuration</h4>
    <div class="form-control" style="width:100%">
    <label for="directoryInput" class="form-label">Directory</label>
    <input style="margin-bottom:10px" type="text" id="directoryInput" class="namebox form-control w-50" placeholder="Directory"
        aria-label="Example text with button addon" aria-describedby="button-addon1" value="<%=currentUser.name%>/Workflows/<%=workflow.workflowName%>">
    
    <label for="scheduleInput">Schedule</label>
    <input id="scheduleInput" type="number" placeholder="Schedule" class="form-control w-25"> exectutes every n minutes </br>
    <label for="timeoutInput">Timeout</label>
    <input id="timeoutInput" type="number" placeholder="Timeout" class="form-control w-25"> times out after n seconds
    <label for="args">Arguments: </label>
    <textarea class="form-control" rows=5 id="args">{
        "[argument1]",
}</textarea>
    <label for="envVars">Environment Variables: </label>
    <textarea class="form-control" rows=5 id="envVars">{
    "[variablesName]":"[variableValue]"    
}</textarea>    
</div>
    <h4 style="margin-top:20px">Console Output</h4>
    <div id="Output" class="form-control" style="width:100%;height:250px;overflow: scroll;">
<pre><textarea style="width:100%;height:200px;border:none;font-size: 20px;overflow: scroll;white-space: pre-wrap;"></textarea></pre>
    </div>
        
    
    
</div>
    
<script src="../../../modules/prism.js"></script>
<script>
    var x = 23
    var y = 600
    function update(text){
        text = text.replace(/\</g,"&lt;");
        var element = document.querySelector("#codeDisplay")
        element.innerHTML = text;
        Prism.highlightElement(element)
        if(text[text.length-1] == '\n'){
            console.log("Return pressed")
            var lines = element.innerHTML.split(/\r*\n/)
            var lineCount = lines.length;
            if(lineCount >= x){
                x += 10
                y += 280
                $('#codeInput, #Highlighting').css("height", y+'px')
            }   
        }
    }

</script>
<style>

    #codeInput, #highlighting{
        margin: 10px;
        margin-top:40px;
        padding: 10px;
        border: 0;
        width: 100%;
        height: 644px;
        tab-size: 4;
    }

    #codeInput, #highlighting, #highlighting * {
        font-size: 14pt;
        font-family: monospace;
        line-height: 20pt;
    }

    #codeInput, #highlighting {
        position: absolute;
        top:1100px;
        left:0;
        margin:0;
        margin-top: 30px
    }

    #codeInput {
        z-index: 1;
    }

    #highlighting {
        z-index: 0;
    }

    #codeInput {
        color: transparent;
        background: transparent;
        caret-color: grey;
    }

</style>
<script>
    function saveWorkflow(user){
        var workflowName = $("#nameBox").val()
        var workflowContent = $("#codeInput").val()
        var schedule = $("#scheduleInput").val()
        var args = $('#args').val()
        var envVars = $("#envVars").val()

        //Send a request to create a new file or save exisiting file
        $.ajax({
            type:'POST',
            url: '/workflows/save',
            data: {
                name: workflowName,
                content: workflowContent,
                user: user,
                schedule: schedule,
                envVars: envVars,
                args: args
            },
            success: function(){
                console.log("Saved Successfully");
            },
            dataType: 'JSON'
        })

    }
    function runWorkflow(user){
        var Workflow = {}

        Workflow.name = $('#nameBox').val(),
        Workflow.directory = $('#directoryInput').val(),
        Workflow.schedule = $('#scheduleInput').val(),
        Workflow.env = [],
        Workflow.args = [],
        Workflow.timeout = $('#timeoutInput').val()

        console.log('<%=workflow.recordId%>')

        $.ajax({
            type:"POST",
            url:'/workflows/test',
            data:{
                workflowId: '<%=workflow.recordId%>'
            },
            success: function(data){
                console.log(data)
                outputString = ""
                for(var i = 0; i < data.message.length; i++){
                    var temp = data.message[i]
                    .replace(/\"/g, '&quot;')
                    .replace(/\</g, '&lt;')
                    .replace(/\>/g, '&gt;');
                    outputString += temp + "</br>"
                }

                outputString += "</br> Executes in: " + data.timetoExecute
        
                if(typeof data.err !== 'undefined'){
                    var output = data.status + "</br>" + data.err.traceback
                    $('#Output').html(output)
                } else {
                    $('#Output').html(outputString)
                }
            },
            error: function(err){
                console.log("Error")
                $('#Output').html(err)
            }
        })
    }
</script>
<% include ./partials/footer.ejs %>